use crate::{
    hlist::define_null,
    registry::Registry,
    system::schedule::{
        claim,
        stages,
        task,
        Stager,
        Stages,
    },
};

define_null!();

pub trait Scheduler<
    'a,
    R,
    Resources,
    I,
    P,
    RI,
    SFI,
    SVI,
    SP,
    SI,
    SQ,
    ResourceViewsContainmentsLists,
    ResourceViewsIndicesLists,
    ResourceViewsCanonicalContainmentsLists,
    ResourceViewsReshapeIndicesLists,
> where
    R: Registry,
{
    type Stages: Stages<
        'a,
        R,
        Resources,
        SFI,
        SVI,
        SP,
        SI,
        SQ,
        ResourceViewsContainmentsLists,
        ResourceViewsIndicesLists,
        ResourceViewsCanonicalContainmentsLists,
        ResourceViewsReshapeIndicesLists,
    >;

    fn as_stages(&'a mut self) -> Self::Stages;
}

impl<'a, R, Resources>
    Scheduler<
        'a,
        R,
        Resources,
        Null,
        Null,
        Null,
        stages::Null,
        stages::Null,
        stages::Null,
        stages::Null,
        stages::Null,
        stages::Null,
        stages::Null,
        stages::Null,
        stages::Null,
    > for task::Null
where
    R: Registry,
{
    type Stages = stages::Null;

    #[inline]
    fn as_stages(&'a mut self) -> Self::Stages {
        stages::Null
    }
}

impl<
        'a,
        R,
        Resources,
        T,
        U,
        I,
        IS,
        P,
        PS,
        RI,
        RIS,
        SFI,
        SFIS,
        SVI,
        SVIS,
        SP,
        SPS,
        SI,
        SIS,
        SQ,
        SQS,
        ResourceViewsContainmentsList,
        ResourceViewsContainmentsLists,
        ResourceViewsIndicesList,
        ResourceViewsIndicesLists,
        ResourceViewsCanonicalContainmentsList,
        ResourceViewsCanonicalContainmentsLists,
        ResourceViewsReshapeIndicesList,
        ResourceViewsReshapeIndicesLists,
    >
    Scheduler<
        'a,
        R,
        Resources,
        (I, IS),
        (P, PS),
        (RI, RIS),
        (SFI, SFIS),
        (SVI, SVIS),
        (SP, SPS),
        (SI, SIS),
        (SQ, SQS),
        (
            ResourceViewsContainmentsList,
            ResourceViewsContainmentsLists,
        ),
        (ResourceViewsIndicesList, ResourceViewsIndicesLists),
        (
            ResourceViewsCanonicalContainmentsList,
            ResourceViewsCanonicalContainmentsLists,
        ),
        (
            ResourceViewsReshapeIndicesList,
            ResourceViewsReshapeIndicesLists,
        ),
    > for (T, U)
where
    (T, U): Stager<
        'a,
        R,
        Resources,
        claim::Null,
        I,
        P,
        RI,
        SFI,
        SVI,
        SP,
        SI,
        SQ,
        ResourceViewsContainmentsList,
        ResourceViewsIndicesList,
        ResourceViewsCanonicalContainmentsList,
        ResourceViewsReshapeIndicesList,
    >,
    <(T, U) as Stager<
        'a,
        R,
        Resources,
        claim::Null,
        I,
        P,
        RI,
        SFI,
        SVI,
        SP,
        SI,
        SQ,
        ResourceViewsContainmentsList,
        ResourceViewsIndicesList,
        ResourceViewsCanonicalContainmentsList,
        ResourceViewsReshapeIndicesList,
    >>::Remainder: Scheduler<
        'a,
        R,
        Resources,
        IS,
        PS,
        RIS,
        SFIS,
        SVIS,
        SPS,
        SIS,
        SQS,
        ResourceViewsContainmentsLists,
        ResourceViewsIndicesLists,
        ResourceViewsCanonicalContainmentsLists,
        ResourceViewsReshapeIndicesLists,
    >,
    R: Registry + 'a,
    Resources: 'a,
    I: 'a,
    P: 'a,
    RI: 'a,
    SFI: 'a,
    SVI: 'a,
    SP: 'a,
    SI: 'a,
    SQ: 'a,
    ResourceViewsContainmentsList: 'a,
    ResourceViewsIndicesList: 'a,
    ResourceViewsCanonicalContainmentsList: 'a,
    ResourceViewsReshapeIndicesList: 'a,
{
    type Stages = (
        <(T, U) as Stager<
            'a,
            R,
            Resources,
            claim::Null,
            I,
            P,
            RI,
            SFI,
            SVI,
            SP,
            SI,
            SQ,
            ResourceViewsContainmentsList,
            ResourceViewsIndicesList,
            ResourceViewsCanonicalContainmentsList,
            ResourceViewsReshapeIndicesList,
        >>::Stage,
        <<(T, U) as Stager<
            'a,
            R,
            Resources,
            claim::Null,
            I,
            P,
            RI,
            SFI,
            SVI,
            SP,
            SI,
            SQ,
            ResourceViewsContainmentsList,
            ResourceViewsIndicesList,
            ResourceViewsCanonicalContainmentsList,
            ResourceViewsReshapeIndicesList,
        >>::Remainder as Scheduler<
            'a,
            R,
            Resources,
            IS,
            PS,
            RIS,
            SFIS,
            SVIS,
            SPS,
            SIS,
            SQS,
            ResourceViewsContainmentsLists,
            ResourceViewsIndicesLists,
            ResourceViewsCanonicalContainmentsLists,
            ResourceViewsReshapeIndicesLists,
        >>::Stages,
    );

    #[inline]
    fn as_stages(&'a mut self) -> Self::Stages {
        let (stage, remainder) = self.extract_stage();
        (stage, remainder.as_stages())
    }
}
